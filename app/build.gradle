import org.apache.commons.codec.binary.Base64
import org.apache.commons.codec.digest.DigestUtils

apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.0"

    defaultConfig {
        applicationId "org.mariotaku.travisplayground"
        minSdkVersion 22
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        release {
            storeFile decodeKeyStoreFileFromBase64Env('RELEASE_KEYSTORE_BASE64')
            storePassword System.getenv('RELEASE_KEYSTORE_PASSWORD')
            keyAlias System.getenv('RELEASE_KEYSTORE_KEY_ALIAS')
            keyPassword System.getenv('RELEASE_KEYSTORE_KEY_PASSWORD')
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (signingConfigs.release.storeFile != null) {
                signingConfig signingConfigs.release
            }
        }
    }
}

def decodeKeyStoreFileFromBase64Env(String name) {
    String keyStoreBase64 = System.getenv(name)
    if (keyStoreBase64 == null) return null
    File tempKeyStoreFile = File.createTempFile("tmp_ks_", ".jks", File.createTempDir())
    FileOutputStream fos = null
    try {
        fos = new FileOutputStream(tempKeyStoreFile)
        fos.write(Base64.decodeBase64(keyStoreBase64))
        fos.flush()
    } catch (IOException e) {
        e.printStackTrace()
        return null
    } finally {
        if (fos != null) {
            fos.close()
        }
    }
    final FileInputStream is = new FileInputStream(tempKeyStoreFile)
    String calculatedMd5 = DigestUtils.md5Hex(is)
    String keyStoreMd5 = System.getenv(name + "_MD5")
    if (keyStoreMd5 != null) {
        if (!keyStoreMd5.equals(calculatedMd5)) {
            throw new RuntimeException('MD5 mismatch. calculated ' + calculatedMd5 + ', provided ' + keyStoreMd5)
        }
    } else {
        printf("MD5 of created file is %s\n", calculatedMd5)
    }
    return tempKeyStoreFile
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
